score_dict = {
	'11111': 100000,
	'011111': 100000,
	'0111110': 100000,
	'111110': 100000,
	'011110': 7000,
	'01111': 4000,
	'11110': 4000,
	'010111': 2000,
	'011011': 2000,
	'011101': 2000,
	'101110': 2000,
	'110110': 2000,
	'111010': 2000,
	'0101110': 2000,
	'0110110': 2000,
	'0111010': 2000,
	'10111': 2000,
	'11011': 2000,
	'11101': 2000,
	'01110': 3000,
	'0111': 1500,
	'1110': 1500,
	'01011': 800,
	'01101': 800,
	'10110': 800,
	'11010': 800,
	'010110': 800,
	'011010': 800,
	'0110': 200,
	'011': 100,
	'110': 100,
	'0101': 50,
	'01010': 50,
	'1010': 50,
	'010': 10,
	'01': 1,
	'10': 1,
	'-1-1-1-1-1': 100000,
	'0-1-1-1-1-1': 100000,
	'0-1-1-1-1-10': 100000,
	'-1-1-1-1-10': 100000,
	'0-1-1-1-10': 7000,
	'0-1-1-1-1': 4000,
	'-1-1-1-10': 4000,
	'0-10-1-1-1': 2000,
	'0-1-10-1-1': 2000,
	'0-1-1-10-1': 2000,
	'-10-1-1-10': 2000,
	'-1-10-1-10': 2000,
	'-1-1-10-10': 2000,
	'0-10-1-1-10': 2000,
	'0-1-10-1-10': 2000,
	'0-1-1-10-10': 2000,
	'-10-1-1-1': 2000,
	'-1-10-1-1': 2000,
	'-1-1-10-1': 2000,
	'0-1-1-10': 3000,
	'0-1-1-1': 1500,
	'-1-1-10': 1500,
	'0-10-1-1': 800,
	'0-1-10-1': 800,
	'-10-1-10': 800,
	'-1-10-10': 800,
	'0-10-1-10': 800,
	'0-1-10-10': 800,
	'0-1-10': 200,
	'0-1-1': 100,
	'-1-10': 100,
	'0-10-1': 50,
	'0-10-10': 50,
	'-10-10': 50,
	'0-10': 10,
	'0-1': 1,
	'-10': 1
}

enemy_score_dict = {
	'0-11111': 20000,
	'-11111': 20000,
	'1-1111': 20000,
	'11-111': 20000,
	'111-11': 20000,
	'1111-10': 20000,
	'1111-1': 20000,
	'0111-11': 20000,
	'011-111': 20000,
	'01-1111': 20000,
	'1-11110': 20000,
	'11-1110': 20000,
	'111-110': 20000,
	'01-11110': 20000,
	'011-1110': 20000,
	'0111-110': 20000,
	'0-1111': 1500,
	'-1111': 1500,
	'111-10': 1500,
	'111-1': 1500,
	'0-11110': 3500,
	'-11110': 3500,
	'1-1110': 1500,
	'11-110': 1500,
	'0111-10': 3500,
	'0111-1': 3500,
	'011-11': 1500,
	'01-111': 1500,
	'01-1110': 3500,
	'011-110': 3500,
	'0-10111': 3500,
	'-10111': 3500,
	'0-11011': 3500,
	'-11011': 3500,
	'0-11101': 3500,
	'-11101': 3500,
	'0-110110': 1500,
	'-110110': 1500,
	'0-111010': 1500,
	'-111010': 1500,
	'1110-10': 3500,
	'1110-1': 3500,
	'1101-10': 3500,
	'1101-1': 3500,
	'1011-10': 3500,
	'1011-1': 3500,
	'01011-10': 1500,
	'01011-1': 1500,
	'01101-10': 1500,
	'01101-1': 1500,
	'0-111': 150,
	'-111': 150,
	'11-10': 150,
	'11-1': 150,
	'0-1110': 50,
	'-1110': 50,
	'011-10': 50,
	'011-1': 50,
	'01-11': 100,
	'1-110': 100,
	'01-110': 100,
	'0-11': 10,
	'-11': 10,
	'1-10': 10,
	'1-1': 10,
	'0-110': 10,
	'-110': 10,
	'01-10': 10,
	'01-1': 10,
	
	'1-1-1-1-1': 20000,
	'-11-1-1-1': 20000,
	'-1-11-1-1': 20000,
	'-1-1-11-1': 20000,
	'-1-1-1-110': 20000,
	'-1-1-1-11': 20000,
	'0-1-1-11-1': 20000,
	'0-1-11-1-1': 20000,
	'0-11-1-1-1': 20000,
	'01-1-1-1-1': 20000,
	'-11-1-1-10': 20000,
	'-1-11-1-10': 20000,
	'-1-1-11-10': 20000,
	'0-11-1-1-10': 20000,
	'0-1-11-1-10': 20000,
	'0-1-1-11-10': 20000,
	'01-1-1-1': 1500,
	'1-1-1-1': 1500,
	'-1-1-110': 1500,
	'-1-1-11': 1500,
	'01-1-1-10': 3500,
	'1-1-1-10': 3500,
	'-11-1-10': 1500,
	'-1-11-10': 1500,
	'0-1-1-110': 3500,
	'0-1-1-11': 3500,
	'0-1-11-1': 1500,
	'0-11-1-1': 1500,
	'0-11-1-10': 3500,
	'0-1-11-10': 3500,
	'010-1-1-1': 3500,
	'10-1-1-1': 3500,
	'01-10-1-1': 3500,
	'1-10-1-1': 3500,
	'01-1-10-1': 3500,
	'1-1-10-1': 3500,
	'01-10-1-10': 1500,
	'1-10-1-10': 1500,
	'01-1-10-10': 1500,
	'1-1-10-10': 1500,
	'-1-1-1010': 3500,
	'-1-1-101': 3500,
	'-1-10-110': 3500,
	'-1-10-11': 3500,
	'-10-1-110': 3500,
	'-10-1-11': 3500,
	'0-10-1-110': 1500,
	'0-10-1-11': 1500,
	'0-1-10-110': 1500,
	'0-1-10-11': 1500,
	'01-1-1': 150,
	'1-1-1': 150,
	'-1-110': 150,
	'-1-11': 150,
	'01-1-10': 50,
	'1-1-10': 50,
	'0-1-110': 50,
	'0-1-11': 50,
	'0-11-1': 100,
	'-11-10': 100,
	'0-11-10': 100
}


def all_positions():
	# 0 какой игрок занял ячейку или ячейка пуста
	# 1 общий бал позиции для игрока
	# 2 бал позиции по горизонтали для игрока
	# 3 бал позиции по вертикали для игрока
	# 4 бал позиции по диагонали для игрока
	# 5 бал позиции по антидиагонали для игрока
	# 6 общий бал позиции для алгоритма
	# 7 бал позиции по горизонтали для алгоритма
	# 8 бал позиции по вертикали для алгоритма
	# 9 бал позиции по диагонали для алгоритма
	# 10 бал позиции по антидиагонали для алгоритма
	# 11 общий бал по закрытым двойкам для игрока
	# 12 сумма балов по закрытым двойкам и общего бала по позиции для игрока
	# 13 как ходит игрок 0 - ставит камень, [str, str] - убирает камни соперника по перечисленным направлениям
	# 14 общий бал по закрытым двойкам для алгоритма
	# 15 сумма балов по закрытым двойкам и общего бала по позиции для алгоритма
	# 16 как ходит алгоритм 0 - ставит камень, [str, str] - убирает камни соперника по перечисленным направлениям
	# 17 сколько появится на поле double three, если игрок поставит камень
	# 18 double three по горизонтали у игрока
	# 19 double three по вертикали у игрока
	# 20 double three по диагонали у игрока
	# 21 double three по антидиагонали у игрока
	# 22 сколько появится на поле double three, если алгоритм поставит камень
	# 23 double three по горизонтали у алгоритма
	# 24 double three по вертикали у алгоритма
	# 25 double three по диагонали у алгоритма
	# 26 double three по антидиагонали у алгоритма
	positions = {}
	for i in range(19):
		for j in range(19):
			positions[(i, j)] = [0] * 27
	return positions


def score(line):
	if line in ('01110', '010110', '011010', '0-1-1-10', '0-10-1-10', '0-1-10-10'):
		return score_dict.get(line, 0), 1
	else:
		return score_dict.get(line, 0), 0


def enemy_score(line):
	return enemy_score_dict.get(line, 0)
